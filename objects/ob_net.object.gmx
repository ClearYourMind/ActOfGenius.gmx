<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_misc_net</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Network variables

globalvar ip;
ip = 127.0.0.1

globalvar player_name;
player_name = "ActOfGenius"

globalvar socket_id;
socket_id = -1

globalvar port;
port = 62329


enum cmd {
  none,
  hello,
  text,
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get incoming data values
var net_type = async_load[? "type"]
var net_id   = async_load[? "id"]
var net_ip   = async_load[? "ip"]
var net_port = async_load[? "port"]

switch net_type {
case network_type_connect:
case network_type_disconnect:
  var net_socket    = async_load[? "socket"]
  var net_succeeded = async_load[? "succeeded"]
  break
case network_type_data:
  var net_buffer    = async_load[? "buffer"]
  var net_size      = async_load[? "size"]
  break
}

sendbuf = buffer_create(128, buffer_grow, 1);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// network_type_connect
if net_type = network_type_connect {


}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// network_type_data

if net_type = network_type_data {
  var net_cmd = buffer_read(net_buffer, buffer_u8)
  
  switch net_cmd {
  case cmd.hello:
    // Receive cmd.hello + server name
    var s = buffer_read(net_buffer, buffer_string)
    show_message('Greeting from ' +net_ip+ ' "'+s+'"') 
    with instance_create(0,0, ob_encrypt) {
      question = s
      perform(ev_encrypt.encrypt)
      var answer = last_perform_result[0]
    }  
    // Send cmd.hello + answer + player name
    buffer_write(sendbuf, buffer_u8,  cmd.hello)
    buffer_write(sendbuf, buffer_u32, answer)
    buffer_write(sendbuf, buffer_string, player_name)
    network_send_packet(net_id, sendbuf, buffer_tell(sendbuf))
    
    break
  case cmd.logon:
    // Receive cmd.logon + ob_session.id + ob_player_info.id
    var new_session     = buffer_read(net_buffer, buffer_u32)
    var new_player_info = buffer_read(net_buffer, buffer_u32)
    show_debug_message("Logon information: SessionID = " + string(new_session)+"; PlayerID = " + string(new_player_info) )
      // where should I record these?
    break
  }
  
  
  // debug
  buffer_seek(net_buffer, buffer_seek_start, 1)  // reset position
  show_debug_message('ip: '+net_ip+' &gt;&gt; '+buffer_read(net_buffer, buffer_string))
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End of event

buffer_delete(sendbuf)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finalization

//ds_list_destroy(global.serverlist)
//ds_list_destroy(global.servernames)

if socket_id &gt; 0
  network_destroy(socket_id)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
