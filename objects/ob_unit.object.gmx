<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ob_game_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init properties

created = false

partcount = 0
parts[0] = noone

teamId = 0
selected = false
control = ctrl.AI
target = noone

preferChassis = noone
preferHead    = noone

aiScript = noone      // выполняемая команда 
o_aiScript = noone    // Предыдущий скрипт (определять изменение скрипта)

// Эти скрипты задаются из файла
aiMainScript   = noone  // Неизменяемый скрипт, выполняется всегда перед перел aiScript'ом
o_aiMainScript = noone

acIdle         = noone
scFindTarget   = noone
scTargetFound  = noone
scFollowTarget = noone
scDestroyTarget = noone

name = ''
fullname = ''
filename = ''


explType = noone
explScale = 1
explSound = noone     // Звук при смерти
shieldValue = 0

preloaded = noone

sightDist   = 0
retreatDist = 0

debugstr = ''

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CREATION CODE RUNS NEXT</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleaning up

for (var i=0; i&lt;partcount; i++)
with parts[i] instance_destroy()



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play sound

sc_play_sound(explSound)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create explosion 

if (object_exists(explType))
with (instance_create(x,y, explType)) {
  image_xscale = other.explScale
  image_yscale = other.explScale
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>UNIT INITIALIZATION</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        (running once)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>created</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create parts from preloaded unit

//var preloaded;

with ob_unit_preloaded
if name == other.name {
    other.preloaded = id
    break;
}

if instance_exists(preloaded) {
    show_debug_message('Preloaded unit "'+name+'" found ('+string(preloaded)+'). Creating unit...')
} else {
    show_debug_message('Preloaded unit "'+name+'" not found!')
    exit
}

partcount = preloaded.partcount
var i = 0
repeat (partcount) {
  parts[i] = noone
  i++
}

var obj;
for (var i=0; i&lt;partcount; i++) {
    with preloaded.parts[i] obj=instance_copy(false)
    parts[i] = obj
    parts[i].visible = true
    parts[i].parent = id        // parent is ob_unit that every part associated with
}

// set real part to parentPart
for (i=0; i&lt;partcount; i++) {
    if parts[i].parentPart != noone {
        show_debug_message('Parent for part ' +string(i)+' ('+ object_get_name(parts[i].object_index)+') is: '+
                           string(parts[i].parentPart)+' ('+ object_get_name(parts[parts[i].parentPart].object_index)+')' ) 
        parts[i].parentPart = parts[parts[i].parentPart]
        parts[i].parentPartName = object_get_name(parts[i].parentPart.object_index)
    } else {   // default
        parts[i].parentPart = parts[i].parent  // ob_unit
        parts[i].parentPartName = object_get_name(parts[i].parentPart.object_index)
    }
}    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Group parts by types

chassis[0] = noone
body[0]    = noone
head[0]    = noone
cannon[0]  = noone

chassis = sc_objarray_find_by_parent(parts, ob_chassis)
body    = sc_objarray_find_by_parent(parts, ob_body)
head    = sc_objarray_find_by_parent(parts, ob_head)
cannon  = sc_objarray_find_by_parent(parts, ob_cannon)

// assign cannons to corresponding heads
for (var i=0; i&lt;array_length_1d(cannon); i++)
if object_is_ancestor(cannon[i].parentPart.object_index, ob_head) {
    var hd = cannon[i].parentPart;
    hd.headCannon[hd.gunCount] = cannon[i]
    hd.gunCount++
}

// set mask
sprite_index = body[array_length_1d(body)-1].sprite_index
//mask_index = body[array_length_1d(body)-1].mask_index


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Further init (created = true)

name        = preloaded.name
fullname    = preloaded.fullname
height      = preloaded.height
explScale   = preloaded.explScale
explType    = preloaded.explType
explSound   = preloaded.explSound
shieldValue = preloaded.shieldValue
objHealth   = preloaded.objHealth

sightDist   = preloaded.sightDist
retreatDist = preloaded.retreatDist

scIdle          = preloaded.scIdle
scFindTarget    = preloaded.scFindTarget
scTargetFound   = preloaded.scTargetFound
scFollowTarget  = preloaded.scFollowTarget
scDestroyTarget = preloaded.scDestroyTarget

aiMainScript = preloaded.aiMainScript
o_aiMainScript = aiMainScript

preferChassis = chassis[0]




created = true


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug

var s='';

for (var i=0; i&lt;array_length_1d(head); i++) {
    s = 'Head ('+ string(head[i]) +') has ' +string(array_length_1d(head[i].headCannon))+ ' cannons assigned: '
    for (var j=0; j&lt;head[i].gunCount; j++) {
        s+=string(head[i].headCannon[j])+', '
    }
    show_debug_message(s)
}

s=''
s += 'Chassis count=' + string(array_length_1d(chassis))+'; '
for(var i=0; i&lt;array_length_1d(chassis); i++)
    s += object_get_name(chassis[i].object_index) +' ('+ string(chassis[i]) +'), '
show_debug_message(s)    

s=''
s += 'Body count=' + string(array_length_1d(body))+'; '
for(var i=0; i&lt;array_length_1d(body); i++)
    s += object_get_name(body[i].object_index) +' ('+ string(body[i]) +'), '
show_debug_message(s)    

s=''
s += 'Head count=' + string(array_length_1d(head))+'; '
for(var i=0; i&lt;array_length_1d(head); i++)
    s += object_get_name(head[i].object_index) +' ('+ string(head[i]) +'), '
show_debug_message(s)    
s=''
for(var i=0; i&lt;array_length_1d(head); i++)
    s += 'BurstTime = ' +string(head[i].burstTime)+ '; '
show_debug_message(s)    

s=''
s += 'Cannon count=' + string(array_length_1d(cannon))+'; '
for(var i=0; i&lt;array_length_1d(cannon); i++)
    s += object_get_name(cannon[i].object_index) +' ('+ string(cannon[i]) +'), '
show_debug_message(s)    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move all parts together

for(var i=partcount-1; i&gt;-1; i--)
if instance_exists(parts[i])
with parts[i] {
    if (xOffset == 0) and (yOffset == 0) {
        x = parentPart.x 
        y = parentPart.y 
    } else {
        var _a = degtorad(360 - parentPart.image_angle);
        var _c = cos(_a);
        var _s = sin(_a);
        x = parentPart.x + (xOffset*_c - yOffset*_s)
        y = parentPart.y + (xOffset*_s + yOffset*_c)
    }
    image_angle = parentPart.image_angle + direction //+ 90
}

    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PROCESS CONTROLS</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manual CHASSIS control

if instance_exists(chassis[0])
if control == ctrl.Player
if instance_exists(ctrlMethod) 
with chassis[0] {
//    idea = 'hand'
//    tgSpeed = 0
//    tgAngle = angle
    
    if ctrlMethod.keys[k.Move] {
        tgSpeed = maxSpeed
    } else
    if ctrlMethod.keys[k.Back] {
        tgSpeed = -maxSpeed
    } else
      tgSpeed = 0 
    
    if ctrlMethod.keys[k.Left] {
       tgAngle = angle + 90
    } else
    if ctrlMethod.keys[k.Right] {
       tgAngle = angle - 90
    } else
      tgAngle = angle
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manual HEADS control

if control = ctrl.Player
if instance_exists(ctrlMethod)
for (var i=0; i&lt;array_length_1d(head); i++)
if instance_exists(head[i])
if head[i].control == ctrl.Player 
with head[i] {

    tgAngle = direction

    if ctrlMethod.keys[k.RotateLeft] {
        tgAngle = direction + 50
    }
    
    if ctrlMethod.keys[k.RotateRight] {
        tgAngle = direction - 50
    }
    
    if ctrlMethod.keys[k.Fire] {
        idea = 'shot' 
    } else {
        idea = ''
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>control</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>ctrl.AI</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process AI  (Execute AI Scripts)

if script_exists(aiMainScript) {
  script_execute(aiMainScript)
} //else show_debug_message('Unit "'+fullname+'" has NO aiMainScript assigned')

///  Execute aiScript

// Determine if a script is changed
if o_aiScript != aiScript {
  show_debug_message('Unit "'+fullname+'" changed aiScript to '+script_get_name(aiScript))
  o_aiScript = aiScript
}
  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Mixed control scripts are used here because different types of controls might be combined in one unit</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_game_object">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process collision
var angle = degtorad(180-point_direction(x, y, other.x, other.y));
 
    x += cos(angle)*(abs(speed))
    y += sin(angle)*(abs(speed))
//    speed *= 0.8
//    motion_add(angle, speed)
 
//    show_debug_message('Collision  = '+string(angle/pi*180)+'; Direction = '+string(direction))

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select unit

selected = not selected

if selected {
    // Удаляем лишние выделения
    if instance_exists(ob_select)
        with ob_select instance_destroy()        
    with instance_create(x, y, ob_select)
        unit = other.id
    if Teams[# teamId, 0] == ctrl.Player {
        control = ctrl.Player
        o_aiMainScript = aiMainScript
        aiMainScript = noone
//        chassis[0].idea = ''
    }
    global.SelUnit = id
    view_object[0] = id

} else {
    aiMainScript = o_aiMainScript
    control = ctrl.AI
    SelUnit = noone
    view_object[0] = noone
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DRAW DEBUG INFO</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
